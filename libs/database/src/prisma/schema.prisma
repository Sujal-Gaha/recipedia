// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider                         = "npx zod-prisma-types"
  output                           = "../../../contract/src/__generated__"
  prismaClientPath                 = ".prisma/client"
  useMultipleFiles                 = false
  writeBarrelFiles                 = false
  createInputTypes                 = false
  addInputTypeValidation           = false
  addIncludeType                   = false
  addSelectType                    = false
  validateWhereUniqueInput         = true
  createOptionalDefaultValuesTypes = false
  createRelationValuesTypes        = false
  createPartialTypes               = false
  useDefaultValidators             = false
  coerceDate                       = true
  writeNullishInModelTypes         = false
}

model Todo {
  id          String @id @default(cuid())
  name        String
  description String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  is_deleted Boolean   @default(false)
  deleted_at DateTime?

  is_completed Boolean   @default(false)
  completed_at DateTime?
}

enum UserType {
  ADMIN
  CHEF
  USER
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  name              String
  password          String
  image             String?
  is_email_verified Boolean  @default(false)
  user_type         UserType @default(USER)

  is_suspended Boolean?  @default(false)
  suspended_at DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  recipe            Recipe[]           @relation("recipe_user")
  recipeUpvotes     RecipeUpvote[]     @relation("recipe_upvote_user")
  recipeFavourites  RecipeFavourite[]  @relation("recipe_favourite_user")
  recipeReviews     RecipeReview[]     @relation("recipe_review_user")
  recipeReviewVotes RecipeReviewVote[] @relation("recipe_review_vote_user")
  followers         UserFollower[]     @relation("user_followers")
  followings        UserFollower[]     @relation("user_followings")

  @@map("user")
}

model UserFollower {
  follower_id  String
  following_id String

  follower  User @relation("user_followers", fields: [follower_id], references: [id])
  following User @relation("user_followings", fields: [following_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([follower_id, following_id])
  @@map("user_followers")
}

model File {
  id                 String   @id @default(uuid())
  file_name          String
  file_path          String
  file_size_in_bytes Int
  created_at         DateTime @default(now())

  is_deleted Boolean?  @default(false)
  deleted_at DateTime?

  @@map("files")
}

enum RecipeDifficulty {
  EASY
  MEDIUM
  HARD
}

enum RecipeStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DELETED
}

model Recipe {
  id               String           @id @default(cuid())
  title            String
  slug             String           @unique // eg: title = Ram's Curry Omelete, slug = rams-curry-omelete
  description      String
  preparation_time Int // In minutes
  cook_time        Int // In minutes
  difficulty       RecipeDifficulty @default(EASY)
  status           RecipeStatus     @default(PUBLISHED)
  is_flagged       Boolean          @default(false)
  is_deleted       Boolean          @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  user_id String
  user    User   @relation("recipe_user", fields: [user_id], references: [id])

  ingredients RecipeIngredient[] @relation("recipe_ingredient")
  images      RecipeImage[]      @relation("recipe_image")
  upvotes     RecipeUpvote[]     @relation("recipe_upvote")
  favourites  RecipeFavourite[]  @relation("recipe_favourite")
  reviews     RecipeReview[]     @relation("recipe_review")
  steps       RecipeStep[]       @relation("recipe_step")
  tips        RecipeTip[]        @relation("recipe_tip")

  @@map("recipes")
}

model RecipeImage {
  id         String  @id @default(cuid())
  url        String
  is_primary Boolean @default(false)
  recipe_id  String

  recipe Recipe @relation("recipe_image", fields: [recipe_id], references: [id])

  created_at DateTime @default(now())

  @@map("recipe_images")
}

model RecipeUpvote {
  id        String @id @default(cuid())
  user_id   String
  recipe_id String

  user   User   @relation("recipe_upvote_user", fields: [user_id], references: [id])
  recipe Recipe @relation("recipe_upvote", fields: [recipe_id], references: [id])

  created_at DateTime @default(now())

  @@unique([user_id, recipe_id])
  @@map("recipe_upvotes")
}

model RecipeFavourite {
  id        String @id @default(cuid())
  user_id   String
  recipe_id String

  user   User   @relation("recipe_favourite_user", fields: [user_id], references: [id])
  recipe Recipe @relation("recipe_favourite", fields: [recipe_id], references: [id])

  created_at DateTime @default(now())

  @@unique([user_id, recipe_id])
  @@map("user_favourites")
}

enum RecipeReviewRatingEnum {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

model RecipeReview {
  id         String                 @id @default(cuid())
  user_id    String
  recipe_id  String
  rating     RecipeReviewRatingEnum
  comment    String
  is_flagged Boolean                @default(false)

  user   User   @relation("recipe_review_user", fields: [user_id], references: [id])
  recipe Recipe @relation("recipe_review", fields: [recipe_id], references: [id])

  votes RecipeReviewVote[] @relation("recipe_review_vote")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("recipe_reviews")
}

enum RecipeReviewVoteType {
  UPVOTE
  DOWNVOTE
}

model RecipeReviewVote {
  id        String               @id @default(cuid())
  user_id   String
  review_id String
  type      RecipeReviewVoteType

  user   User         @relation("recipe_review_vote_user", fields: [user_id], references: [id])
  review RecipeReview @relation("recipe_review_vote", fields: [review_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([user_id, review_id])
  @@map("recipe_review_votes")
}

model RecipeStep {
  id        String @id @default(cuid())
  step_no   Int
  title     String
  content   String
  recipe_id String

  recipe Recipe @relation("recipe_step", fields: [recipe_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([recipe_id, step_no])
  @@map("recipe_steps")
}

model RecipeTip {
  id        String @id @default(cuid())
  content   String
  recipe_id String

  recipe Recipe @relation("recipe_tip", fields: [recipe_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("recipe_tips")
}

model Ingredient {
  id          String @id @default(cuid())
  name        String
  slug        String @unique
  image       String
  category    String
  description String

  calories      Float @default(0) // in kcal
  protein       Float @default(0) // in gram
  carbohydrates Float @default(0) // in gram
  fat           Float @default(0) // in gram
  sugar         Float @default(0) // in gram
  fiber         Float @default(0) // in gram

  variants IngredientVariant[] @relation("ingredient_variant")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("ingredients")
}

model IngredientVariant {
  id            String @id @default(cuid())
  name          String
  ingredient_id String
  image         String

  ingredient Ingredient @relation("ingredient_variant", fields: [ingredient_id], references: [id])

  recipeIngredients RecipeIngredient[] @relation("recipe_ingredient_variant")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("ingredient_variants")
}

model RecipeIngredient {
  id                    String  @id @default(cuid())
  recipe_id             String
  ingredient_variant_id String
  quantity              Float
  unit                  String? // eg: 1tbsp, 300ml
  note                  String?

  recipe             Recipe            @relation("recipe_ingredient", fields: [recipe_id], references: [id])
  ingredient_variant IngredientVariant @relation("recipe_ingredient_variant", fields: [ingredient_variant_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("recipe_ingredients")
}
